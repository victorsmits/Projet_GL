<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADONetHelper</name>
    </assembly>
    <members>
        <member name="T:ADONetHelper.DbClient">
            <summary>
            Represents the base class for all <see cref="T:ADONetHelper.DbClient"/> classes
            </summary>
            <seealso cref="T:ADONetHelper.IDbClient"/>
            <remarks>
            DbClient is a utility class that encompasses both a <see cref="T:System.Data.Common.DbConnection"/> and a <see cref="T:System.Data.Common.DbCommand"/>
            to help query a database with minimal coding to focus on the users SQL
            </remarks>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectAsync``1(System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectListAsync``1(System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants to create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectListAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbDataReaderAsync(System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/> to use with the passed in <paramref name="query"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbDataReaderAsync(System.String,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetScalarValueAsync(System.String)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the value of the first column in the first row as <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetScalarValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns the value of the first column in the first row as <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedNonQueryAsync(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure with a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedNonQueryAsync(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteNonQueryAsync(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteNonQueryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.OpenAsync">
            <summary>
            Opens the connection to a database asynchronously
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.OpenAsync(System.Threading.CancellationToken)">
            <summary>
            Opens the connection to a database asynchronously
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
        </member>
        <member name="E:ADONetHelper.DbClient.StateChange">
            <summary>
            Sets the state change event handler.  This event occurs when the <see cref="P:System.Data.Common.DbConnection.State"/> changes
            </summary>
            <value>
            The state change handler delegate
            </value>
        </member>
        <member name="F:ADONetHelper.DbClient._executeSQL">
            <summary>
            The execute SQL
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.ConnectionStringKeyCount">
            <summary>
            Gets the current number of keys that are contained within the <see cref="P:ADONetHelper.DbClient.ConnectionString"/> property
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.ExecuteSQL">
            <summary>
            Represents an instance of the <see cref="T:ADONetHelper.ISqlExecutor"/> class to facilitate querying a data store
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.ServerVersion">
            <summary>
            Gets a string that represents the version of the server to which the object is connected
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.State">
            <summary>
            The current <see cref="T:System.Data.ConnectionState"/> of the <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.Database">
            <summary>
            Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.DataSource">
            <summary>
            Gets the name of the database server to which to connect.
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.ConnectionString">
            <summary>
            ConnectionString as a <see cref="T:System.String"/> to use when creating a <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.VariableBinder">
            <summary>
            The character symbol to use when binding a variable in a given providers SQL query
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.QueryCommandType">
            <summary>
            Represents how a command should be interpreted by the data provider.  Default value is <see cref="F:System.Data.CommandType.Text"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.RetryAttempts">
            <summary>
            The maximum amount of attempts a SQL query should attempt to execute before failing.  Only uses values greater than zero
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.RetryInterval">
            <summary>
            The amount of time in seconds a retry attempt should wait before another attempt is made.  Only uses values greater than zero
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.  Default value is 30
            </summary>
        </member>
        <member name="P:ADONetHelper.DbClient.ConnectionTimeout">
            <summary>
            Gets the time to wait in seconds while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="F:ADONetHelper.DbClient.disposedValue">
            <summary>
            Variable To detect redundant calls of dispose
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(ADONetHelper.ISqlExecutor)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with an instance of <see cref="T:ADONetHelper.ISqlExecutor"/>
            </summary>
            <param name="executor">An instance of <see cref="T:ADONetHelper.ISqlExecutor"/></param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.Data.CommandType,System.Data.Common.DbProviderFactory)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="connectionString"/>, and <paramref name="queryCommandType"/>, and <paramref name="factory"/>
            </summary>
            <param name="factory">An instance of a <see cref="T:System.Data.Common.DbProviderFactory"/> client class</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="connectionString"/> and <paramref name="factory"/>
            </summary>
            <param name="factory">An instance of the <see cref="T:System.Data.Common.DbProviderFactory"/> client class</param>
            <param name="connectionString">The connection string used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.String,System.Data.CommandType)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in with the passed in <paramref name="connectionString"/>, <paramref name="providerName"/>, and <paramref name="queryCommandType"/>
            </summary>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="connectionString"/> and <paramref name="providerName"/>
            </summary>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
            <param name="connectionString">The connection string used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> with the passed in <paramref name="providerName"/>
            </summary>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> using an existing <see cref="T:System.Data.Common.DbConnection"/> to initialize the <paramref name="connection"/>
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/> to use to query a database </param>
        </member>
        <member name="M:ADONetHelper.DbClient.#ctor(System.String,ADONetHelper.IDbObjectFactory)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.DbClient"/> using the passed in <paramref name="connectionString"/> and <paramref name="factory"/>
            </summary>
            <param name="connectionString">The connection string used to query a database</param>
            <param name="factory">An instance of <see cref="T:ADONetHelper.IDbObjectFactory"/> to create the objects needed to help query a database</param>
        </member>
        <member name="M:ADONetHelper.DbClient.Finalize">
            <summary>
            Finalizer for the class to release unmanaged resources
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.AddConnectionStringProperty(System.String,System.Object)">
            <summary>
            Adds a property name and value to the current connection string
            </summary>
            <param name="name">The name of the connection string property</param>
            <param name="value">The value to use with the connection string property</param>
        </member>
        <member name="M:ADONetHelper.DbClient.RemoveConnectionStringProperty(System.String)">
            <summary>
            Removes a connection string property from the connection string by name
            </summary>
            <param name="name">The name of the connection string property</param>
        </member>
        <member name="M:ADONetHelper.DbClient.GetConnectionStringPropertyValue(System.String)">
            <summary>
            Retrieves a connection string property value as an object
            </summary>
            <param name="name">The name of the connection string property</param>
            <returns>Returns a connection string property as an <see cref="T:System.Object"/>, null if property is not present</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ClearConnectionString">
            <summary>
            Clears the content of the connection string
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.ConnectionStringContainsKey(System.String)">
            <summary>
            Checks if the current <see cref="P:ADONetHelper.DbClient.ConnectionString"/> in use contains the passed in <paramref name="keyword"/>
            </summary>
            <param name="keyword">The keyword to verify is in the current <see cref="P:ADONetHelper.DbClient.ConnectionString"/></param>
            <returns>Returns a <see cref="T:System.Boolean"/> indicating if the <see cref="P:ADONetHelper.DbClient.ConnectionString"/> contains the passed in <paramref name="keyword"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ConfigureConnectionString(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Configures the connection string with the key value pairs passed into the routine
            This will clear the current connection string to start over
            </summary>
            <param name="properties">Key value pairs of connection string property names and values</param>
        </member>
        <member name="M:ADONetHelper.DbClient.GetCurrentParameters">
            <summary>
            Retrieves the entire <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Data.Common.DbParameter"/> that are currently in use
            </summary>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Data.Common.DbParameter"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.RemoveParameter(System.String)">
            <summary>
            Removes a <see cref="T:System.Data.Common.DbParameter"/> from the parameters collection for the current <see cref="T:System.Data.Common.DbConnection"/> by using the parameter name
            </summary>
            <param name="parameterName">The name of the parameter to identify the parameter to remove from the collection</param>
            <returns>Returns true if item was successully removed, false otherwise if item was not found in the list</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.RemoveParameter(System.Int32)">
            <summary>
            Removes a <see cref="T:System.Data.Common.DbParameter"/> from the parameters collection for the current <see cref="T:System.Data.Common.DbConnection"/> by using the index of the parameter
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to remove from the collection</param>
            <returns>Returns true if item was successully removed, false otherwise if item was not found in the list</returns>
            <exception cref="T:System.IndexOutOfRangeException">thrown when an attempt is made to access an element of an array or collection with an index that is outside the bounds of the array or less than zero.</exception>
        </member>
        <member name="M:ADONetHelper.DbClient.ClearParameters">
            <summary>
            Clears all parameters from the parameters collection
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.GetParameter(System.String)">
            <summary>
            Retrieves a <see cref="T:System.Data.Common.DbParameter"/> object by using the passed in parameter name
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the passed in parameter name is not present in the parameters collection</exception>
            <param name="parameterName">The name of the parameter to use to find the parameter value</param>
            <returns>The specified <see cref="T:System.Data.Common.DbParameter"/> object from the parameters collection</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetParameter(System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.Data.Common.DbParameter"/> from the parameters collection by using the index of the parameter
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to retrieve from the collection</param>
            <returns>Returns the DbParameter object located at this index</returns>
            <exception cref="T:System.IndexOutOfRangeException">thrown when an attempt is made to access an element of an array or collection with an index that is outside the bounds of the array or less than zero.</exception>
        </member>
        <member name="M:ADONetHelper.DbClient.ReplaceParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Replaces an existing parameter with the new <see cref="T:System.Data.Common.DbParameter"/> with an existing <see cref="P:System.Data.Common.DbParameter.ParameterName"/>
            </summary>
            <param name="parameterName">The index as a <c>string</c> to use when searching for the existing parameter</param>
            <param name="param">A new instance of <see cref="T:System.Data.Common.DbParameter"/></param>
        </member>
        <member name="M:ADONetHelper.DbClient.ReplaceParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Replaces an existing parameter with the new <see cref="T:System.Data.Common.DbParameter"/> passed in at the <paramref name="index"/>
            </summary>
            <param name="index">The index as an <see cref="T:System.Int32"/> to use when searching for the existing parameter</param>
            <param name="param">A new instance of <see cref="T:System.Data.Common.DbParameter"/></param>
            <exception cref="T:System.IndexOutOfRangeException">thrown when an attempt is made to access an element of an array or collection with an index that is outside the bounds of the array or less than zero.</exception>
        </member>
        <member name="M:ADONetHelper.DbClient.SetParamaterValue(System.String,System.Object)">
            <summary>
            Sets the value of an existing <see cref="T:System.Data.Common.DbParameter"/> by using the <paramref name="parameterName"/> and passed in <paramref name="value"/>
            </summary>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="value">The value of the parameter as an <see cref="T:System.Object"/></param>
        </member>
        <member name="M:ADONetHelper.DbClient.SetParamaterValue(System.Int32,System.Object)">
            <summary>
            Sets the value of an existing <see cref="T:System.Data.Common.DbParameter"/> by using the <paramref name="index"/> and passed in <paramref name="value"/>
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to retrieve from the collection</param>
            <param name="value">The value of the parameter as an <see cref="T:System.Object"/></param>
            <exception cref="T:System.IndexOutOfRangeException">thrown when an attempt is made to access an element of an array or collection with an index that is outside the bounds of the array or less than zero.</exception>
        </member>
        <member name="M:ADONetHelper.DbClient.AddParameter(System.String,System.Object,System.Data.DbType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Adds a new <see cref="T:System.Data.Common.DbParameter"/> to the parameters collection for the current <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the passed in parameter name is already present in the parameters collection</exception>
            <param name="type">The data type of the parameter being sent to the data store with the query</param>
            <param name="size">The maximum size, in bytes, of the data being sent to the datastore.  If parameter is a variable length don't set for input parameters</param>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="parameterValue">The value of the parameter</param>
            <param name="paramDirection">The direction of the parameter, defaults to input.  The size must be set for output parameters</param>
        </member>
        <member name="M:ADONetHelper.DbClient.AddParameter(System.String,System.Object)">
            <summary>
            Adds a new <see cref="T:System.Data.Common.DbParameter"/> to the parameters collection for the current <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the passed in parameter name is already present in the parameters collection</exception>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="parameterValue">The value of the parameter</param>
        </member>
        <member name="M:ADONetHelper.DbClient.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Adds the passed in parameter to the parameters collection for the current <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <exception cref="T:System.ArgumentException">Thrown when the passed in parameter name is already present in the parameters collection</exception>
            <param name="param">An instance of <see cref="T:System.Data.Common.DbParameter"/> object, that is created the by the caller</param>
        </member>
        <member name="M:ADONetHelper.DbClient.AddParameterRange(System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            Adds an <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects to the helpers underlying db parameter collection for the current <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <exception cref="T:System.ArgumentException">Throws argument exception when there are duplicate parameter names</exception>
            <param name="dbParams">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects to add to the helpers underlying db parameter collection</param>
        </member>
        <member name="M:ADONetHelper.DbClient.AddParameterRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an <see cref="T:System.Collections.Generic.IDictionary`2"/> object to add to the helpers underlying db parameter collection for the current <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <param name="dbParams">An <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where the key is a parameter name and the value is the value of a parameter</param>
        </member>
        <member name="M:ADONetHelper.DbClient.Contains(System.String)">
            <summary>
            Checks for a paremeter in the parameters list with the passed in name
            </summary>
            <param name="parameterName">The name of the parameter to use when searching the Parameters list</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="parameterName"/> passed into routine is null or empty</exception>
            <returns>True if this parameter exists in the parameters collection, false otherwise</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.Contains(System.Int32)">
            <summary>
            Checks for a paremeter in the parameters list with the passed in index
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to remove from the collection</param>
            <returns>Returns true if item was found in the paramerters collection, false otherwise if item was not found in the collection</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.Dispose(System.Boolean)">
            <summary>
            Dispose of any unmanged resorces if disposing passed in is true 
            </summary>
            <param name="disposing">Whether or not we need to explicitly close unmanaged resources</param>
        </member>
        <member name="M:ADONetHelper.DbClient.Dispose">
            <summary>
            Dispose of any unmanged resources
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbDataReader(System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/> to use with the passed in <paramref name="query"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbDataReader(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            Utility method for acting on a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="act">Action methods that takes in a <see cref="T:System.Data.Common.DbDataReader"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetScalarValue(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value as an <see cref="T:System.Object"/> from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObject``1(System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObject``1(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectEnumerable``1(System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create to from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDataObjectList``1(System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <typeparam name="T">An instance of the type the caller wants create to from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteNonQuery(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the amount of records affected by the passed in query</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedNonQuery(System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedNonQuery(System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="commitTransaction">Whether or not to commit the transaction that was passed in if successful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbTransaction">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/> using the underlying <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.GetDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/> using the underlying <see cref="T:System.Data.Common.DbConnection"/> with the <paramref name="level"/>
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel"/> to describe the locking behavior for the transaction</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.DbClient.ChangeDatabase(System.String)">
            <summary>
            Changes the current <see cref="T:System.Data.Common.DbConnection"/> to target a different database
            </summary>
            <param name="databaseName">The name of a database as a <see cref="T:System.String"/></param>
        </member>
        <member name="M:ADONetHelper.DbClient.Close">
            <summary>
            Disposes of the <see cref="T:System.Data.Common.DbConnection"/> being used by this instance, clears any <see cref="T:System.Data.Common.DbParameter"/>
            assocatied with the current <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="M:ADONetHelper.DbClient.Open">
            <summary>
            Opens the connection to a database
            </summary>
        </member>
        <member name="T:ADONetHelper.DbField">
            <summary>
            Attribute class that defines a field that goes into and comes out of a database
            </summary>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="P:ADONetHelper.DbField.DefaultValueIfNull">
            <summary>
            The default value as a <see cref="T:System.Object"/> in the instance where a value from the database is <see cref="F:System.DBNull.Value"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.DbField.DatabaseFieldName">
            <summary>
            The name of a field that is being pulled from a query
            </summary>
        </member>
        <member name="M:ADONetHelper.DbField.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:ADONetHelper.DbField"/>
            </summary>
            <param name="dbFieldName">The name of a field that exists in a database table</param>
            <param name="valueIfNull">The default value if the field coming from a query has a value of <see cref="F:System.DBNull.Value"/></param>
        </member>
        <member name="T:ADONetHelper.DbFieldIgnore">
            <summary>
            Attribute class that defines if a property should be read out of a database query
            </summary>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="M:ADONetHelper.DbFieldIgnore.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:ADONetHelper.DbFieldIgnore"/>
            </summary>
        </member>
        <member name="T:ADONetHelper.DbObjectFactory">
            <summary>
            A class that facilitates creating the ADO.NET class objects necessary to query a data store
            </summary>
            <remarks>
            <see cref="T:ADONetHelper.DbObjectFactory"/> is a class that is intended to be used at the lowest level of the ADO.NET workflow.  
            It creates the objects necessary to query a relational database using the RDBMS providers own driver to do this.
            For the .NET framework the providers dll can be within the Global Assembly Cache, and the providers dll can also be used as a dll
            contained within the application
            </remarks>
            <seealso cref="T:ADONetHelper.IDbObjectFactory"/>
        </member>
        <member name="P:ADONetHelper.DbObjectFactory.VariableBinder">
            <summary>
            The character symbol to use when binding a variable in a given providers SQL query
            </summary>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Instantiates a new instance with the passed in <paramref name="factory"/>
            </summary>
            <param name="factory">An instance of the <see cref="T:System.Data.Common.DbProviderFactory"/> client class</param>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.#ctor(System.String)">
            <summary>
            Instantiates a new instance with the passed in <paramref name="providerName"/>
            </summary>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Instantiates a new instance with the passed in <paramref name="connection"/>
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/> </param>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbConnectionStringBuilder(System.String)">
            <summary>
            Gets a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off the provider passed into class using the passed in <paramref name="connectionString"/>
            </summary>
            <param name="connectionString">The connection string that will be used to when building a connection string</param>
            <returns>Returns a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off of target .NET framework data provider</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbConnectionStringBuilder">
            <summary>
            Gets a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off the provider passed into class
            </summary>
            <returns>Returns a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off of target .NET framework data provider</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbCommand(System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.Common.DbConnection,System.Int32,System.Data.Common.DbTransaction)">
             <summary>
             Gets an instance of a formatted <see cref="T:System.Data.Common.DbCommand"/> object based on the specified provider
             </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
             <param name="commandTimeout">Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.</param>
             <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
             <param name="parameters">The list of <see cref="T:System.Collections.Generic.IEnumerable`1"/> associated with the query parameter</param>
             <param name="query">The SQL command text or name of stored procedure to execute against the data store</param>
             <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
             <returns>Returns an formatted <see cref="T:System.Data.Common.DbCommand"/> object based off the provider passed into the class</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            Gets an instance of a formatted <see cref="T:System.Data.Common.DbCommand"/> object based on the specified provider
            </summary>
            <param name="commandTimeout">Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.</param>
            <param name="connection">Represents a connection to a database</param>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> object</param>
            <returns>Returns an formatted <see cref="T:System.Data.Common.DbCommand"/> object based off the provider passed into the class</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbCommand(System.Int32)">
            <summary>
            Gets an instance of <see cref="T:System.Data.Common.DbCommand"/> object
            </summary>
            <param name="commandTimeout">Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbCommand"/> object</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbCommand">
            <summary>
            Gets an instance of <see cref="T:System.Data.Common.DbCommand"/> object
            </summary>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbCommand"/> object</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbConnection(System.String)">
            <summary>
            Instantiates a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object based on the specified provider
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object based on the specified provider</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbConnection">
            <summary>
            Instantiates a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object based on the specified provider
            </summary>
            <returns>Returns a new instance of the <see cref="T:System.Data.Common.DbConnection"/> object based on the specified provider</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbParameter(System.String,System.Object,System.Data.DbType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Gets an initialized instance of a <see cref="T:System.Data.Common.DbParameter"/> object based on the specified provider
            </summary>
            <param name="dataType">The <see cref="T:System.Data.DbType"/> of the field in the database</param>
            <param name="size">maximum size, in bytes, of the data.  Should not be set for numeric types.</param>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="parameterValue">The value of the parameter</param>
            <param name="paramDirection">The direction of the parameter, defaults to <see cref="F:System.Data.ParameterDirection.Input"/></param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbParameter"/> object with information passed into procedure</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbParameter(System.String,System.Object)">
            <summary>
            Gets an initialized instance of a <see cref="T:System.Data.Common.DbParameter"/> object based on the specified provider
            </summary>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="parameterValue">The value of the parameter</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbParameter"/> object with information passed into procedure</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbParameter">
            <summary>
            Create an instance of <see cref="T:System.Data.Common.DbParameter"/> object based off of the provider passed into factory
            </summary>
            <returns>Returns an instantiated <see cref="T:System.Data.Common.DbParameter"/> object</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbTransaction(System.Data.Common.DbConnection)">
            <summary>
            Gets an instace of the <see cref="T:System.Data.Common.DbTransaction"/> object based on the <see cref="T:System.Data.Common.DbConnection"/> object passed in
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <returns>An instance of the <see cref="T:System.Data.Common.DbTransaction"/> object</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetDbTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <summary>
            Gets an instace of the <see cref="T:System.Data.Common.DbTransaction"/> object based on the <see cref="T:System.Data.Common.DbConnection"/> object passed in
            </summary>
            <param name="level">The transaction locking level for the passed in <paramref name="connection"/></param>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <returns>An instance of the <see cref="T:System.Data.Common.DbTransaction"/> object</returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetProviderFactory(System.String)">
            <summary>
            Gets an instance of <see cref="T:System.Data.Common.DbProviderFactory"/> based off a .NET drivers <paramref name="providerName"/>, such as System.Data.SqlClientt
            </summary>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbProviderFactory"/></returns>
        </member>
        <member name="M:ADONetHelper.DbObjectFactory.GetProviderFactory(System.Reflection.Assembly)">
            <summary>
            Gets an instance of <see cref="T:System.Data.Common.DbProviderFactory"/> based off a .NET driver <see cref="T:System.Reflection.Assembly"/>
            Looks for the <see cref="T:System.Data.Common.DbProviderFactory"/> within the current <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbProviderFactory"/></returns>
        </member>
        <member name="T:ADONetHelper.IDbClient">
            <summary>
            Contract class for all classes that implement the DbClient pattern
            </summary>
            <seealso cref="T:System.IDisposable"/>
            <seealso cref="T:ADONetHelper.IDbParameterUtility"/>
            <seealso cref="T:ADONetHelper.IConnectionStringUtility"/>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDataObjectAsync``1(System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDataObjectAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDataObjectListAsync``1(System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDataObjectListAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a list of type parameter object based on the fields in the passed in query</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDbDataReaderAsync(System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/> to use with the passed in <paramref name="query"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDbDataReaderAsync(System.String,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetScalarValueAsync(System.String)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the value of the first column in the first row as <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetScalarValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns the value of the first column in the first row as <see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteNonQueryAsync(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteNonQueryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteTransactedNonQueryAsync(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure with a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteTransactedNonQueryAsync(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="E:ADONetHelper.IDbClient.StateChange">
            <summary>
            Sets the state change event handler.  This event occurs when the <see cref="P:System.Data.Common.DbConnection.State"/> changes
            </summary>
            <value>
            The state change handler delegate
            </value>
        </member>
        <member name="P:ADONetHelper.IDbClient.ConnectionStringKeyCount">
            <summary>
            Gets the current number of keys that are contained within the <see cref="P:ADONetHelper.IDbClient.ConnectionString"/> property
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.State">
            <summary>
            The current <see cref="T:System.Data.ConnectionState"/> of the <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.RetryAttempts">
            <summary>
            The maximum amount of attempts a SQL query should attempt to execute before failing
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.RetryInterval">
            <summary>
            The amount of time in milliseconds a retry attempt should wait before another attempt is made
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.ConnectionString">
            <summary>
            ConnectionString as a <see cref="T:System.String"/> to use when creating a <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.ConnectionTimeout">
            <summary>
            Gets the time to wait in seconds while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.Database">
            <summary>
            Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.DataSource">
            <summary>
            Gets the name of the database server to which to connect.
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbClient.ServerVersion">
            <summary>
            Gets a string that represents the version of the server to which the object is connected
            </summary>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDbTransaction">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/>n using the underlying <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDbTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a <see cref="T:System.Data.Common.DbTransaction"/> using the underlying <see cref="T:System.Data.Common.DbConnection"/> with the <paramref name="level"/>
            </summary>
            <param name="level">The <see cref="T:System.Data.IsolationLevel"/> to describe the locking behavior for the transaction</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbTransaction"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.Close">
            <summary>
            Closes any open connections being used by the helper 
            </summary>
        </member>
        <member name="M:ADONetHelper.IDbClient.Open">
            <summary>
            Opens the connection to a database if not already opened
            </summary>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDataObject``1(System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDataObjectEnumerable``1(System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDbDataReader(System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/> object created from the passed in query
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/> to use with the passed in <paramref name="query"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetDbDataReader(System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            Utility method for acting on a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="act">Action methods that takes in a <see cref="T:System.Data.Common.DbDataReader"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.GetScalarValue(System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteNonQuery(System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the amount of records affected by the passed in query</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteTransactedNonQuery(System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteTransactedNonQuery(System.String,System.Data.Common.DbTransaction,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a DbTransaction class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="commitTransaction">Whether or not to commit the transaction that was passed in if successful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.IDbClient.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="T:ADONetHelper.IConnectionStringUtility">
            <summary>
            Contract class to modify/retrieve values in a connection string
            </summary>
        </member>
        <member name="M:ADONetHelper.IConnectionStringUtility.AddConnectionStringProperty(System.String,System.Object)">
            <summary>
            Adds a property name and value to the current connection string
            </summary>
            <param name="name">The name of the connection string property</param>
            <param name="value">The value to use with the connection string property</param>
        </member>
        <member name="M:ADONetHelper.IConnectionStringUtility.RemoveConnectionStringProperty(System.String)">
            <summary>
            Removes a connection string property from the connection string by name
            </summary>
            <param name="name">The name of the connection string property</param>
        </member>
        <member name="M:ADONetHelper.IConnectionStringUtility.GetConnectionStringPropertyValue(System.String)">
            <summary>
            Retrieves a connection string property value as an object
            </summary>
            <param name="name">The name of the connection string property</param>
            <returns>Returns a connection string property as an <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:ADONetHelper.IConnectionStringUtility.ConfigureConnectionString(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Configures the connection string with the key value pairs passed into the routine
            </summary>
            <param name="properties">Key value pairs of connection string property names and values</param>
        </member>
        <member name="M:ADONetHelper.IConnectionStringUtility.ClearConnectionString">
            <summary>
            Clears the contents of the connection string
            </summary>
        </member>
        <member name="M:ADONetHelper.IConnectionStringUtility.ConnectionStringContainsKey(System.String)">
            <summary>
            Checks if the connection string in use contains the passed in <paramref name="keyword"/>
            </summary>
            <param name="keyword">The keyword to verify is in a connection string</param>
            <returns>Returns a <see cref="T:System.Boolean"/> indicating if a connection string contains the passed in <paramref name="keyword"/></returns>
        </member>
        <member name="T:ADONetHelper.IDbObjectFactory">
            <summary>
            The contract class for a factory class that creates database objects in order to query a database
            </summary>
        </member>
        <member name="P:ADONetHelper.IDbObjectFactory.VariableBinder">
            <summary>
            The character symbol to use when binding a variable in a given providers SQL query
            </summary>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbConnectionStringBuilder(System.String)">
            <summary>
            Gets a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off the provider passed into class
            </summary>
            <param name="connectionString">The connection string that will be used to when building a connection string</param>
            <returns>Returns a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off of target .NET framework data provider</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbConnectionStringBuilder">
            <summary>
            Gets a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off the provider passed into class
            </summary>
            <returns>Returns a <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> based off of target .NET framework data provider</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbCommand">
            <summary>
            Gets an instance of a <see cref="T:System.Data.Common.DbCommand"/> object
            </summary>
            <returns>Returns an instance of a <see cref="T:System.Data.Common.DbCommand"/> Object</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbCommand(System.Int32)">
            <summary>
            Gets an instance of a <see cref="T:System.Data.Common.DbCommand"/> object
            </summary>
            <param name="commandTimeout">Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.</param>
            <returns>Returns an instance of DbCommand Object</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbCommand(System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.Int32)">
            <summary>
            Gets an instance of a <see cref="T:System.Data.Common.DbCommand"/> subclass based on the specified provider
            </summary>
            <param name="commandTimeout">Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.</param>
            <param name="connection">Represents a <see cref="T:System.Data.Common.DbConnection"/> to a database</param>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <returns>Returns an instantiated formatted DbCommand object based off the provider passed into the class</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbCommand(System.Data.CommandType,System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Data.Common.DbConnection,System.Int32,System.Data.Common.DbTransaction)">
            <summary>
            Instantiates a new isntance of the <see cref="T:System.Data.Common.DbCommand"/> subclass based on the provider passed into the class constructor
            </summary>
            <param name="commandTimeout">Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.</param>
            <param name="connection">Represents a connection to a database</param>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="parameters">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of parameters associated with the query parameter</param>
            <param name="query">The SQL command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instantiated formatted DbCommand object based off the provider passed into the class</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbTransaction(System.Data.Common.DbConnection)">
            <summary>
            Instantiates a new instance of a <see cref="T:System.Data.Common.DbTransaction"/> subclass based on the provider passed into class constructor
            </summary>
            <param name="connection">An instance of the <see cref="T:System.Data.Common.DbConnection"/> class</param>
            <returns>An instance of the DbTransaction class</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbTransaction(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <summary>
            Gets an instace of the <see cref="T:System.Data.Common.DbTransaction"/> object based on the <see cref="T:System.Data.Common.DbConnection"/> object passed in
            </summary>
            <param name="level">The transaction locking level for the passed in <paramref name="connection"/></param>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/></param>
            <returns>An instance of the <see cref="T:System.Data.Common.DbTransaction"/> object</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbConnection">
            <summary>
            Instantiates a new instance of a <see cref="T:System.Data.Common.DbConnection"/> subclass based on the specified provider
            </summary>
            <returns>Returns a new instance of the <see cref="T:System.Data.Common.DbConnection"/> subclass based on the specified provider</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbConnection(System.String)">
            <summary>
            Instantiates a new instance of a <see cref="T:System.Data.Common.DbConnection"/> subclass based on the provider passed into the class constructor
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns a new instance of the DbConnection subclass based on the specified provider</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbParameter">
            <summary>
            Create an instance of a <see cref="T:System.Data.Common.DbParameter"/> based off of the provider passed into factory
            </summary>
            <returns>Returns an instantiated <see cref="T:System.Data.Common.DbParameter"/> object</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbParameter(System.String,System.Object)">
            <summary>
            Gets an initialized instance of a <see cref="T:System.Data.Common.DbParameter"/> subclass based on the specified provider
            </summary>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="parameterValue">The value of the parameter</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbParameter"/> type with information passed into procedure</returns>
        </member>
        <member name="M:ADONetHelper.IDbObjectFactory.GetDbParameter(System.String,System.Object,System.Data.DbType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Gets an initialized instance of a <see cref="T:System.Data.Common.DbParameter"/> subclass based on the specified provider
            </summary>
            <param name="dataType">The maximum size, in bytes, of the data</param>
            <param name="size">The data type of the field in the database</param>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="parameterValue">The value of the parameter</param>
            <param name="paramDirection">The direction of the parameter, defaults to input</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbParameter"/> type with information passed into procedure</returns>
        </member>
        <member name="T:ADONetHelper.IDbParameterUtility">
            <summary>
            Contract class for modifying and searching parameters in a DbParameter collection
            </summary>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.RemoveParameter(System.String)">
            <summary>
            Removes a <see cref="T:System.Data.Common.DbParameter"/> from the parameters collection by using the parameter name
            </summary>
            <param name="parameterName">The name of the parameter to identify the parameter to remove from the collection</param>
            <returns>Returns true if item was successully removed, false otherwise if item was not found in the list</returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.RemoveParameter(System.Int32)">
            <summary>
            Removes a <see cref="T:System.Data.Common.DbParameter"/> from the parameters collection by using the index of the parameter
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to remove from the collection</param>
            <returns>Returns true if item was successully removed, false otherwise if item was not found in the list</returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.ReplaceParameter(System.String,System.Data.Common.DbParameter)">
            <summary>
            Replaces an existing parameter with the new <see cref="T:System.Data.Common.DbParameter"/> with an existing <see cref="P:System.Data.Common.DbParameter.ParameterName"/>
            </summary>
            <param name="parameterName">The index as a <c>string</c> to use when searching for the existing parameter</param>
            <param name="param">A new instance of <see cref="T:System.Data.Common.DbParameter"/></param>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.ReplaceParameter(System.Int32,System.Data.Common.DbParameter)">
            <summary>
            Replaces an existing parameter with the new <see cref="T:System.Data.Common.DbParameter"/> passed in at the <paramref name="index"/>
            </summary>
            <param name="index">The index as an <see cref="T:System.Int32"/> to use when searching for the existing parameter</param>
            <param name="param">A new instance of <see cref="T:System.Data.Common.DbParameter"/></param>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.ClearParameters">
            <summary>
            Clears all parameters from the parameters collection
            </summary>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.GetParameter(System.String)">
            <summary>
            Retrieves a DbParameter object by using the passed in parameter name
            </summary>
            <param name="parameterName">The name of the parameter to use to find the parameter value</param>
            <returns>The specified <see cref="T:System.Data.Common.DbParameter"/> object from the parameters collection</returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.GetParameter(System.Int32)">
            <summary>
            Retrieves a parameter from the parameters collection by using the index of the parameter
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to retrieve from the collection</param>
            <returns>Returns the <see cref="T:System.Data.Common.DbParameter"/> object located at this index</returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.GetCurrentParameters">
            <summary>
            Retrieves the entire <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Data.Common.DbParameter"/> that are currently in use
            </summary>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Data.Common.DbParameter"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.AddParameter(System.String,System.Object,System.Data.DbType,System.Nullable{System.Int32},System.Data.ParameterDirection)">
            <summary>
            Adds a new parameter to the parameters collection
            </summary>
            <param name="type">The data type of the parameter being sent to the data store with the query</param>
            <param name="size">The maximum size, in bytes, of the data being sent to the datastore.  If parameter is a variable length don't set for input parameters</param>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="parameterValue">The value of the parameter</param>
            <param name="paramDirection">The direction of the parameter, defaults to input.  The size must be set for output parameters</param>
            <returns>Returns a <see cref="T:System.Data.Common.DbParameter"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Adds the passed in parameter to the parameters collection
            </summary>
            <param name="param">An instance of the <see cref="T:System.Data.Common.DbParameter"/> object, that is created the by the caller</param>
            <returns>Returns a <see cref="T:System.Data.Common.DbParameter"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.AddParameter(System.String,System.Object)">
            <summary>
            Adds a new parameter using the name and value passed into the routine
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value of the parameter</param>
            <returns>Returns a <see cref="T:System.Data.Common.DbParameter"/></returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.SetParamaterValue(System.String,System.Object)">
            <summary>
            Sets the value of an existing <see cref="T:System.Data.Common.DbParameter"/> by using the <paramref name="parameterName"/> and passed in <paramref name="value"/>
            </summary>
            <param name="parameterName">The name of the parameter to identify the parameter</param>
            <param name="value">The value of the parameter as an <see cref="T:System.Object"/></param>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.SetParamaterValue(System.Int32,System.Object)">
            <summary>
            Sets the value of an existing <see cref="T:System.Data.Common.DbParameter"/> by using the <paramref name="index"/> and passed in <paramref name="value"/>
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to retrieve from the collection</param>
            <param name="value">The value of the parameter as an <see cref="T:System.Object"/></param>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.AddParameterRange(System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter})">
            <summary>
            Adds an <see cref="T:System.Collections.Generic.IEnumerable`1"/> objects to the helpers underlying db parameter collection
            </summary>
            <param name="dbParams">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to add to the underlying db parameter collection for the connection</param>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.AddParameterRange(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an <see cref="T:System.Collections.Generic.IDictionary`2"/> object to add to the helpers underlying db parameter collection
            </summary>
            <param name="dbParams">An <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> where the key is a parameter name and the value is the value of a parameter</param>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.Contains(System.String)">
            <summary>
            Checks for a paremeter in the parameters list with the passed in name
            </summary>
            <param name="parameterName">The name of the parameter to use when searching the Parameters list</param>
            <returns>True if this parameter exists in the parameters collection, false otherwise</returns>
        </member>
        <member name="M:ADONetHelper.IDbParameterUtility.Contains(System.Int32)">
            <summary>
            Checks for a paremeter in the parameters list with the passed in index
            </summary>
            <param name="index">The index of the parameter in the parameters collection to identify the parameter to remove from the collection</param>
            <returns>Returns true if item was found in the paramerters collection, false otherwise if item was not found in the collection</returns>
        </member>
        <member name="T:ADONetHelper.ISqlExecutor">
            <summary>
            The contract class for a ISqlExecutor based class
            </summary>
            <seealso cref="T:System.IDisposable"/>
        </member>
        <member name="P:ADONetHelper.ISqlExecutor.VariableBinder">
            <summary>
            The character symbol to use when binding a variable in a given providers SQL query
            </summary>
        </member>
        <member name="P:ADONetHelper.ISqlExecutor.Connection">
            <summary>
            Represents an instance of <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.ISqlExecutor.ConnectionStringBuilder">
            <summary>
            <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> to use to build a connection string based off of the data provider DB helper is using
            </summary>
        </member>
        <member name="P:ADONetHelper.ISqlExecutor.Factory">
            <summary>
            Represents an instance of <see cref="T:ADONetHelper.IDbObjectFactory"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.ISqlExecutor.Parameters">
            <summary>
            The list of query database parameters that are associated with a query
            </summary>
        </member>
        <member name="P:ADONetHelper.ISqlExecutor.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to connect to a datastore</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to connect to a datastore</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> based on the <typeparamref name="T"/> sent into the function to create an object list based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants to create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> based on the <typeparamref name="T"/> sent into the function to create an object list based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants to create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> based on the <typeparamref name="T"/> sent into the function to create an object list based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> based on the <typeparamref name="T"/> sent into the function to create an object list based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants to create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> based on the <typeparamref name="T"/> sent into the function to create an object list based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants to create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to connect to a datastore</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> based on the <typeparamref name="T"/> sent into the function to create an object list based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type the caller wants to create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to connect to a datastore</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A DbDataReader object, the caller is responsible for handling closing the DataReader.  Once the data reader is closed, the Database Connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>A DbDataReader object, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken,System.Data.CommandBehavior)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>A DbDataReader object, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A DbDataReader object, the caller is responsible for handling closing the DataReader.  Once the data reader is closed, the Database Connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="connection">An instance of the DbConnection class</param>
            <returns>A DbDataReader object, the caller is responsible for handling closing the DataReader.  Once the data reader is closed, the Database Connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="connection">An instance of the DbConnection class</param>
            <returns>A DbDataReader object, the caller is responsible for handling closing the DataReader.  Once the data reader is closed, the Database Connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> from the database
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> from the database
            </summary>
            <param name="connection">An instanace of the DbConnection object used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> from the database
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="connection">An instanace of the DbConnection object used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Propagates notification that operations should be canceled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Propagates notification that operations should be canceled</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Propagates notification that operations should be canceled</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedNonQueryAsync(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedNonQueryAsync(System.Data.CommandType,System.Data.Common.DbTransaction,System.String,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="commitTransaction">Whether or not to commit this transaction after it was completed successfully</param>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObject``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of the <typeparamref name="T"/> based on the fields in the passed in query.  Returns the default value for the type if a record is not found</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObject``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns an instance of the <typeparamref name="T"/> based on the fields in the passed in query.  Returns the default value for the type if a record is not found</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObject``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <returns>Returns an instance of the <typeparamref name="T"/> based on the fields in the passed in query.  Returns the default value for the type if a record is not found</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectEnumerable``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passedin <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectEnumerable``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDataObjectEnumerable``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="connection">An instance of the DbConnection class</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbDataReader"/></returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            Utility method for returning a DataReader object
            </summary>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbDataReader"/> object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            Utility method for acting on a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="act">Action methods that takes in a <see cref="T:System.Data.Common.DbDataReader"/></param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValue(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValue(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.GetScalarValue(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="connection">An instanace of the DbConnection object used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row as an object</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQuery(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="connection">An instance of the DbConnection object to use to query a data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteBatchedNonQuery(System.String,System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns the number of rows affected by all queries passed in</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedBatchedNonQuery(System.String,System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="connection">An instance of the DbConnection object to use to query a data store</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.Data.Common.DbTransaction,System.String,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="commitTransaction">Whether or not to commit the transaction that is passed in if succesful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.ISqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="transact">An instance of a DbTransaction class</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="commitTransaction">Whether or not to commit the transaction that is passed in if succesful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="T:ADONetHelper.IXMLExecutor">
            <summary>
            Contract class that defines how a class that can execute sql queries should return xml from the database
            </summary>
        </member>
        <member name="M:ADONetHelper.IXMLExecutor.ExecuteXMLReader(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.Xml.XmlReader"/> based on the <paramref name="query"/>
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns an instance of <see cref="T:System.Xml.XmlReader"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="M:ADONetHelper.IXMLExecutor.ExecuteXMLReaderAsync(System.String)">
            <summary>
            Returns an instance of <see cref="T:System.Xml.XmlReader"/> based on the <paramref name="query"/>
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>Returns an instance of <see cref="T:System.Xml.XmlReader"/> based on the <paramref name="query"/> passed into the routine</returns>
        </member>
        <member name="T:ADONetHelper.SqlExecutor">
            <summary>
            Utility class that provides methods for both retrieving and modifying data in a data store
            </summary>
            <seealso cref="T:ADONetHelper.ISqlExecutor"/>
            <remarks>
            SqlExecutor is a class that encompasses a <see cref="T:System.Data.Common.DbCommand"/> but the user of
            the class must manage the <see cref="T:System.Data.Common.DbConnection"/> the class will use
            </remarks>
        </member>
        <member name="P:ADONetHelper.SqlExecutor.Factory">
            <summary>
            An instance of the database object factory to create database object instances
            </summary>
        </member>
        <member name="P:ADONetHelper.SqlExecutor.Parameters">
            <summary>
            The list of query database parameters that are associated with a query
            </summary>
        </member>
        <member name="P:ADONetHelper.SqlExecutor.VariableBinder">
            <summary>
            The character symbol to use when binding a variable in a given providers SQL query, such as @ symbol
            </summary>
        </member>
        <member name="P:ADONetHelper.SqlExecutor.ConnectionStringBuilder">
            <summary>
            <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> to use to build a connection string based off of the data provider DB helper is using
            </summary>
        </member>
        <member name="P:ADONetHelper.SqlExecutor.Connection">
            <summary>
            Represents an instance of <see cref="T:System.Data.Common.DbConnection"/>
            </summary>
        </member>
        <member name="P:ADONetHelper.SqlExecutor.CommandTimeout">
            <summary>
            Gets or sets the wait time in seconds before terminating the attempt to execute a command and generating an error.
            </summary>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Constructor to query a database using an existing <see cref="T:System.Data.Common.DbConnection"/> to initialize the <paramref name="connection"/>
            </summary>
            <param name="connection">An instance of <see cref="T:System.Data.Common.DbConnection"/> to use to query a database </param>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.#ctor(System.String)">
            <summary>
            The overloaded constuctor that will initialize the <paramref name="providerName"/>
            </summary>
            <example>
            An example of provider name would be System.Data.SqlClient.  The drivers assembly needs to be installed in the Global Assembly Cache in order to be referenced.
            </example>
            <param name="providerName">The name of the data provider that the should be used to query a data store</param>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.#ctor(ADONetHelper.IDbObjectFactory)">
            <summary>
            Initializes a new instance with an instance of <see cref="T:ADONetHelper.IDbObjectFactory"/>
            </summary>
            <param name="factory">An instance of <see cref="T:ADONetHelper.IDbObjectFactory"/></param>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Instantiates a new instance of <see cref="T:ADONetHelper.SqlExecutor"/> with the <paramref name="factory"/>
            </summary>
            <param name="factory">An instance of <see cref="T:System.Data.Common.DbProviderFactory"/></param>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetParameterList(System.Data.Common.DbCommand)">
            <summary>
            Gets all of the existing output parameter values from the passed in command object
            </summary>
            <param name="command">An instance of an existing <see cref="T:System.Data.Common.DbCommand"/> object to retrieve the output parameter values from</param>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.Finalize">
            <summary>
            Destructor for the class
            </summary>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.Dispose">
            <summary>
            Releases the unmanaged resources used by the Component
            </summary>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Gets an instance of the <typeparamref name="T"/> parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Gets an instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine.
            Or the default value of <typeparamref name="T"/> if there are no search results
            </returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/>s</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectListAsync``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants create from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a DbConnection object to use to query a datastore</param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.CloseConnection"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/>, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken,System.Data.CommandBehavior)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.CloseConnection"/></param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/>, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/>, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/>, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/>, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReaderAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.Default"/></param>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValueAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Utility method for returning a <see cref="T:System.Threading.Tasks.Task`1"/> value from the database
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Propagates notification that operations should be canceled</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Propagates notification that operations should be canceled</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="token">Propagates notification that operations should be canceled</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQueryAsync(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQueryAsync(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query as a <see cref="T:System.Threading.Tasks.Task`1"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQueryAsync(System.Data.CommandType,System.Data.Common.DbTransaction,System.String,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="commitTransaction">Whether or not to commit this transaction after it was completed successfully</param>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQueryAsync(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDynamicResultsAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
            Gets the query values coming out of the passed in <paramref name="reader"/> for each row retrieved
            </summary>
            <param name="token">Propagates notification that operations should be canceled</param>
            <param name="reader">An instance of <see cref="T:System.Data.Common.DbDataReader"/> that has the results from a SQL query</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Collections.Generic.Dictionary`2"/> from the results of a sql query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDynamicTypeAsync``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> from the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="dictList">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>/> with the results from a sql query</param>
            <typeparam name="T">A <see cref="T:System.Collections.Generic.List`1"/>that will be generated from the results of a sql query</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Collections.Generic.List`1"/>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObject``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants created from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of the <typeparamref name="T"/> based on the fields in the passed in query.  Returns the default value for the <typeparamref name="T"/> if a record is not found</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObject``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants created from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns an instance of the <typeparamref name="T"/> based on the fields in the passed in query.  Returns the default value for the <typeparamref name="T"/> if a record is not found</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObject``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a single instance of <typeparamref name="T"/> based on the <paramref name="query"/> passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants created from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <returns>Returns an instance of the <typeparamref name="T"/> based on the fields in the passed in query.  Returns the default value for the <typeparamref name="T"/> if a record is not found</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectEnumerable``1(System.Data.CommandType,System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants created from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectEnumerable``1(System.Data.CommandType,System.String,System.String)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants created from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDataObjectEnumerable``1(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Gets a list of the type parameter object that creates an object based on the query passed into the routine
            </summary>
            <typeparam name="T">An instance of the type caller wants created from the query passed into procedure</typeparam>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerable`1"/> based on the results of the passed in <paramref name="query"/></returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/> object created
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.CloseConnection"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the DataReader.  Once the data reader is closed, the underlying database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.String,System.Data.CommandBehavior)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/> object created from the passed in Db Helper object
            </summary>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.CloseConnection"/></param>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the DataReader.  Once the data reader is closed, the underlying database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Data.CommandBehavior,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/> object
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="behavior">Provides a description of the results of the query and its effect on the database.  Defaults to <see cref="F:System.Data.CommandBehavior.CloseConnection"/></param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns an instance of <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.Action{System.Data.Common.DbDataReader})">
            <summary>
            Utility method for acting on a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="act">Action methods that takes in a <see cref="T:System.Data.Common.DbDataReader"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the <see cref="T:System.Data.Common.DbDataReader"/>.  Once the data reader is closed, the database connection will be closed as well</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDbDataReader(System.Data.CommandType,System.String,System.Action{System.Data.Common.DbDataReader},System.Data.Common.DbConnection)">
            <summary>
            Utility method for returning a <see cref="T:System.Data.Common.DbDataReader"/>
            </summary>
            <param name="act"></param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>A <see cref="T:System.Data.Common.DbDataReader"/> object, the caller is responsible for handling closing the DataReader</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValue(System.Data.CommandType,System.String,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValue(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetScalarValue(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for returning a scalar value from the database
            </summary>
            <param name="transact">An instance of <see cref="T:System.Data.Common.DbTransaction"/></param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the value of the first column in the first row returned from the passed in query as an object</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQuery(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing an Ad-Hoc query or stored procedure without a transaction
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteBatchedNonQuery(System.String,System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="connectionString">The connection string used to query a data store</param>
            <returns>Returns the number of rows affected by all queries passed in</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.String,System.String)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.String,System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.Data.Common.DbTransaction,System.String,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="commitTransaction">Whether or not to commit the transaction that was passed in if successful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedNonQuery(System.Data.CommandType,System.Data.Common.DbConnection,System.Data.Common.DbTransaction,System.String,System.Boolean)">
            <summary>
            Utility method for executing a query or stored procedure in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="queryCommandType">Represents how a command should be interpreted by the data provider</param>
            <param name="commitTransaction">Whether or not to commit the transaction that was passed in if successful</param>
            <returns>Returns the number of rows affected by this query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedBatchedNonQuery(System.String,System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery})">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="connectionString">The connection string used to query a data store</param>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbConnection)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.ExecuteTransactedBatchedNonQuery(System.Collections.Generic.IEnumerable{ADONetHelper.SQLQuery},System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Utility method for executing batches of queries or stored procedures in a SQL transaction
            </summary>
            <param name="commands">The list of query database parameters that are associated with a query</param>
            <param name="connection">An instance of a <see cref="T:System.Data.Common.DbConnection"/> object to use to query a datastore</param>
            <param name="transact">An instance of a <see cref="T:System.Data.Common.DbTransaction"/> class</param>
            <returns>Returns the number of rows affected by all queries passed in, assuming all are succesful</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDynamicResultsMultiSet(System.Data.Common.DbDataReader)">
            <summary>
            Gets the query values coming out of the passed in <paramref name="reader"/> for each row retrieved
            </summary>
            <param name="reader">An instance of <see cref="T:System.Data.Common.DbDataReader"/> that has the results from a SQL query</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Collections.Generic.Dictionary`2"/> from the results of a sql query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDynamicResults(System.Data.Common.DbDataReader)">
            <summary>
            Gets the query values coming out of the passed in <paramref name="reader"/> for each row retrieved
            </summary>
            <param name="reader">An instance of <see cref="T:System.Data.Common.DbDataReader"/> that has the results from a SQL query</param>
            <returns>Returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Collections.Generic.Dictionary`2"/> from the results of a sql query</returns>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetDynamicTypeList``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IDictionary{System.String,System.Object}})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.List`1"/> from the passed in <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IEnumerable`1"/>/> with the results from a sql query</param>
            <typeparam name="T">A type that will be generated from the results of a sql query</typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1"/>
            <seealso cref="T:System.Collections.Generic.List`1"/>
        </member>
        <member name="M:ADONetHelper.SqlExecutor.GetSingleDynamicType``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Gets the type of the single dynamic.
            </summary>
            <typeparam name="T">A type that will be generated from the results of a sql query</typeparam>
            <param name="results">The results.</param>
            <returns></returns>
        </member>
        <member name="T:ADONetHelper.SQLQuery">
            <summary>
            Transfer object that contains the information about a query to use when querying a datastore
            </summary>
        </member>
        <member name="F:ADONetHelper.SQLQuery._parameterList">
            <summary>
            The list of query database parameters that are associated with a query
            </summary>
        </member>
        <member name="P:ADONetHelper.SQLQuery.QueryType">
            <summary>
            Represents how a command should be interpreted by the data provider
            </summary>
        </member>
        <member name="P:ADONetHelper.SQLQuery.QueryText">
            <summary>
            The query command text or name of stored procedure to execute against the data store
            </summary>
        </member>
        <member name="P:ADONetHelper.SQLQuery.ParameterList">
            <summary>
            The list of query database parameters that are associated with a query
            </summary>
        </member>
        <member name="M:ADONetHelper.SQLQuery.#ctor(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            Instantiates the SQL Query with text, command type, and parameter list
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="type">Represents how a command should be interpreted by the data provider</param>
            <param name="list">The list of query database parameters that are associated with a query</param>
        </member>
        <member name="M:ADONetHelper.SQLQuery.#ctor(System.String,System.Data.CommandType)">
            <summary>
            Instantiates the SQL Query with text, and command type
            </summary>
            <param name="query">The query command text or name of stored procedure to execute against the data store</param>
            <param name="type">Represents how a command should be interpreted by the data provider</param>
        </member>
        <member name="M:ADONetHelper.SQLQuery.#ctor">
            <summary>
            Empty constructor to instantiate object
            </summary>
        </member>
        <member name="T:ADONetHelper.Utilites">
            <summary>
            Static utility class for assembly
            </summary>
        </member>
        <member name="M:ADONetHelper.Utilites.IsNullableGenericType(System.Type)">
            <summary>
            Checks if the passed in type is a generic type that is nullable
            </summary>
            <param name="type">The .NET type to check for nullable</param>
            <returns>Returns true if the passed in type is nullable, false otherwise</returns>
        </member>
        <member name="M:ADONetHelper.Utilites.OpenDbConnection(System.Data.Common.DbConnection)">
            <summary>
            Opens the passed in <see cref="T:System.Data.Common.DbConnection"/> if the <see cref="P:System.Data.Common.DbConnection.State"/> is <see cref="F:System.Data.ConnectionState.Closed"/>
            </summary>
            <param name="connection">An instance of the <see cref="T:System.Data.Common.DbConnection"/> class</param>
        </member>
        <member name="M:ADONetHelper.Utilites.OpenDbConnectionAsync(System.Data.Common.DbConnection)">
            <summary>
            Opens the passed in <see cref="T:System.Data.Common.DbConnection"/> if the <see cref="P:System.Data.Common.DbConnection.State"/> is <see cref="F:System.Data.ConnectionState.Closed"/>
            </summary>
            <param name="connection">An instance of the <see cref="T:System.Data.Common.DbConnection"/> class</param>
        </member>
        <member name="M:ADONetHelper.Utilites.OpenDbConnectionAsync(System.Data.Common.DbConnection,System.Threading.CancellationToken)">
            <summary>
            Opens the passed in <see cref="T:System.Data.Common.DbConnection"/> if the <see cref="P:System.Data.Common.DbConnection.State"/> is <see cref="F:System.Data.ConnectionState.Closed"/>
            </summary>
            <param name="token">Structure that propogates a notification that an operation should be cancelled</param>
            <param name="connection">An instance of the <see cref="T:System.Data.Common.DbConnection"/> class</param>
        </member>
    </members>
</doc>
